Git

tips: tab可以补全  清空终端clear 查看当前目录文件 dir

配置用户名和用户邮箱（只用配置一次）
git config --global user.name "用户名"
git config --global user.email "邮箱"

查看已经做了的配置
git config --list （所有配置）
git config --list --global (全局的配置)

获取config帮助信息
git help config (打开浏览器)

获取git config 命令的快速参考
gif conifg -h (在命令行显示)

现有目录初始化仓库
对目录右键 Git Bash 打开窗口 git init

检查文件状态
git status	    状态： Untracked files...(未跟踪)     Changes to be committed...(已跟踪)         On branch master...nothing...(无未提交的文件)     红色modified(已修改但未放入暂存区)      绿色modefied(已修改并放入暂存区)
git status -s(--short简写)     状态:   红色??...(未跟踪)       绿色A...(已跟踪)      红色M(已修改但未放入暂存区)       绿色M(已修改并放入暂存区)

跟踪新文件(放入暂存区)
git add 文件全名         全部文件加入暂存区 git add .

提交文件到仓库
git commit -m "提交消息"

撤销对文件的修改---用仓库的文件替换(撤销后就无法再改回来)
git checkout -- 文件全名

取消暂存
git reset HEAD 文件全名

跳过暂存区直接提交(只能对修改的文件使用，新文件无效)
git commit -a -m "描述消息"

移除文件
git rm -f 文件全名 (Git仓库 和工作区都移除)
git rm --cached 文件全名 (只从仓库移除...相当于未跟踪状态)

创建git忽略文件
在想要创建的文件夹中创建一个  .gitignore  文件

glob模式
#开头       是注释
目录名/    表示目录
/开头       表示防止递归
!开头	表示取反
*              匹配零个或多个任意字符
[abc]       匹配任何一个再方括号中的字符
?             匹配一个任意字符
方括号使用短划线分割两个字符表示范围(比如[0-9]指0到9的数字)
**           表示任意中间目录 (比如a/**/z 可以匹配a/z,a/b/z,a/b/c/z)

git log  回顾提交历史(按q退出)
git log -数字 只显示最新的（数字）提交历史
git log -数字 --pretty=oneline  多条数据一行展示
git log -数字 --pretty=format:"%h | %an |  %ar  | %s"
%h 提交的简写哈希值  %an 作者名字  %a 作者修订日期，按多久之前的方式显示  %s提交说明

查看所有提交历史    
git log --pretty=oneline

回退到指定ID的版本    git reset --hard <CommitID>(后面的ID可以用git log --pretty=oneline 查看)

旧版本中要使用git reflog --pretty=oneline 才可以查看新的版本的id

GitHub  HTTPS上传方法
将文件上传到GitHub 按照GitHub上提示操作即可
将修改后的文件同步到GitHub直接使用git push  

GitHub  SSH上传方法
1、打开Git Bash
2、输入ssh-keygen -t rsa -b 4096 -C "自己的Github邮箱"
3、连续三次回车,在 C:\Users\用户名文件夹\.ssh 目录生成id_rsa(私钥)和id_rsa.pub(公钥，需配置到Github)两个文件

配置SSH key
1、记事本打开id_rsa.pub
2、登录Github > 点击头像 >  Settings > SSH and GPG Keys > New SSH key
3、将id_rsa.pub内容粘贴到key对应的文本框中
4、在Title文本框中任意填写一个名称，来标识这个key从何而来
检测配置是否成功 ssh -T git@github.com

克隆
git clone 远程仓库地址

